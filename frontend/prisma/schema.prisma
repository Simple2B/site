generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @map(name: "refresh_token")
  access_token      String? @map(name: "access_token")
  expiresAt         Int?    @map(name: "expires_at")
  token_type        String? @map(name: "token_type")
  scope             String?
  idToken           String?
  sessionState      String? @map(name: "session_state")
  oauthTokenSecret  String? @map(name: "oauth_token_secret")
  oauthToken        String? @map(name: "oauth_token")
  userId            Int
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  telegram      String?
  accounts      Account[]
  sessions      Session[]
  results       Results[]
  attempts      Attempt[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Question {
  id      Int       @id @default(autoincrement())
  text    String
  answers Answer[]
  Results Results[]
}

model Answer {
  id         Int       @id @default(autoincrement())
  text       String
  correct    Boolean
  questionId Int
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  Results    Results[]
}

model Vacancy {
  id          Int      @id @default(autoincrement())
  title       String
  overview    String
  about       String
  applyPath   String
  isDeveloper Boolean
  offer       Offer[]
  skills      Skills[]
}

model Skills {
  id        Int     @id @default(autoincrement())
  text      String
  vacancyId Int
  vacancy   Vacancy @relation(fields: [vacancyId], references: [id], onDelete: Cascade)
}

model Offer {
  id        Int     @id @default(autoincrement())
  text      String
  vacancyId Int
  vacancy   Vacancy @relation(fields: [vacancyId], references: [id], onDelete: Cascade)
}

model Results {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map(name: "created_at")
  answerId   Int
  questionId Int
  userId     Int
  attemptId  Int?
  answer     Answer   @relation(fields: [answerId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  attempt    Attempt?  @relation(fields: [attemptId], references: [id])
}

model Attempt {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map(name: "created_at")
  userId    Int       @map(name: "user_id")
  questions Int[]
  step      Int
  user      User      @relation(fields: [userId], references: [id])
  result    Results[]
}
